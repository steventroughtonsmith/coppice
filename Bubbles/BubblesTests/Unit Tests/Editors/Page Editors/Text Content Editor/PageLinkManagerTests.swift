//
//  PageLinkManagerTests.swift
//  BubblesTests
//
//  Created by Martin Pilkington on 07/12/2019.
//  Copyright Â© 2019 M Cubed Software. All rights reserved.
//

import XCTest
@testable import Bubbles

class PageLinkManagerTests: XCTestCase {
    var modelController: BubblesModelController!
    var pageLinkManager: PageLinkManager!

//    override func setUp() {
//        super.setUp()
//        self.modelController = BubblesModelController(undoManager: UndoManager())
//        self.pageLinkManager = PageLinkManager(pageID: <#ModelID#>, modelController: self.modelController)
//    }
//
//    func test_updatesLinksWhenTextStorageFirstSet() {
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        let page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//
//        self.pageLinkManager.currentTextStorage = storage
//
//        let url = storage.attribute(.link, at: 5, effectiveRange: nil) as? URL
//        XCTAssertEqual(url, page.linkToPage(autoGenerated: true).url)
//    }
//
//    func test_updatesLinksWhenANewPageIsAdded() {
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        self.pageLinkManager.currentTextStorage = storage
//
//        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil))
//
//        let page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//        let url = storage.attribute(.link, at: 5, effectiveRange: nil) as? URL
//        XCTAssertEqual(url, page.linkToPage(autoGenerated: true).url)
//    }
//
//    func test_updatesLinksWhenAPageIsRemoved() {
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        let page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//
//        self.pageLinkManager.currentTextStorage = storage
//
//        self.modelController.collection(for: Page.self).delete(page)
//
//        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil))
//    }
//
//    func test_updatesLinksWhenAPageTitleChanges() {
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        let page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//
//        self.pageLinkManager.currentTextStorage = storage
//
//        page.title = "test"
//        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil) as? URL)
//        let expectedURL = page.linkToPage(autoGenerated: true).url
//        XCTAssertEqual(storage.attribute(.link, at: 0, effectiveRange: nil) as? URL, expectedURL)
//        XCTAssertEqual(storage.attribute(.link, at: 17, effectiveRange: nil) as? URL, expectedURL)
//    }
//
//    func test_updatesLinksWhenTextStoragesChanges() {
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test "))
//        let page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//        self.pageLinkManager.currentTextStorage = storage
//
//        storage.delegate = self.pageLinkManager //This is forwarded in the real app as the main view controller/model needs it too
//
//        storage.beginEditing()
//        storage.insert(NSAttributedString(string: "Hello World"), at: 5)
//        storage.endEditing()
//
//        let url = storage.attribute(.link, at: 5, effectiveRange: nil) as? URL
//        XCTAssertEqual(url, page.linkToPage(autoGenerated: true).url)
//    }
//
//    func test_checksWithDelegateBeforeChanging() throws {
//        let delegate = MockDelegate()
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        self.pageLinkManager.currentTextStorage = storage
//        self.pageLinkManager.delegate = delegate
//
//        self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//
//        let (ranges, _) = try XCTUnwrap(delegate.shouldChangeText)
//        XCTAssertEqual(ranges, [NSRange(location: 0, length: 21)])
//    }
//
//    func test_doesntChangeIfDelegateReturnsFalse() {
//        let delegate = MockDelegate()
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        self.pageLinkManager.currentTextStorage = storage
//        self.pageLinkManager.delegate = delegate
//
//        delegate.shouldChangeTextReturn = false
//        self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//
//        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil))
//    }
//
//    func test_informsDelegateAfterChange() {
//        let delegate = MockDelegate()
//        delegate.shouldChangeTextReturn = true
//        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
//        self.pageLinkManager.currentTextStorage = storage
//        self.pageLinkManager.delegate = delegate
//
//        self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
//        XCTAssertTrue(delegate.textDidChange)
//    }
}

private class MockDelegate: PageLinkManagerDelegate {
    var shouldChangeText: ([NSRange], PageLinkManager)?
    var shouldChangeTextReturn: Bool = false
    func shouldChangeText(in ranges: [NSRange], manager: PageLinkManager) -> Bool {
        self.shouldChangeText = (ranges, manager)
        return self.shouldChangeTextReturn
    }

    var textDidChange = false
    func textDidChange(in manager: PageLinkManager) {
        self.textDidChange = true
    }
}
