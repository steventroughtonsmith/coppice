//
//  PageLinkManagerTests.swift
//  CoppiceTests
//
//  Created by Martin Pilkington on 07/12/2019.
//  Copyright Â© 2019 M Cubed Software. All rights reserved.
//

@testable import Coppice
@testable import CoppiceCore
import XCTest

class PageLinkManagerTests: XCTestCase {
    var modelController: CoppiceModelController!
    var linkedPage: Page!
    var editingPage: Page!
    var pageLinkManager: TextPageLinkManager!
    var previousDefaultsValue: Bool = false

    override func setUp() {
        super.setUp()
        self.modelController = CoppiceModelController(undoManager: UndoManager())
        self.linkedPage = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello World" }
        self.editingPage = self.modelController.collection(for: Page.self).newObject() { $0.title = "Editing Page" }
        self.pageLinkManager = TextPageLinkManager(pageID: self.editingPage.id,
                                               modelController: self.modelController,
                                               parsingDelay: 0.1)
        self.pageLinkManager.isProEnabled = true
        self.previousDefaultsValue = UserDefaults.standard.bool(forKey: .autoLinkingTextPagesEnabled)
        UserDefaults.standard.set(true, forKey: .autoLinkingTextPagesEnabled)
    }

    override func tearDown() {
        super.tearDown()
        UserDefaults.standard.set(self.previousDefaultsValue, forKey: .autoLinkingTextPagesEnabled)
    }


    //MARK: - Single Change
    func test_updatesLinksInTextStorageWhenTextStorageFirstSet() {
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
        self.pageLinkManager.currentTextStorage = storage

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
        }

        let url = storage.attribute(.link, at: 5, effectiveRange: nil) as? URL
        XCTAssertEqual(url, self.linkedPage.linkToPage(autoGenerated: true).url)
    }

    func test_updatesLinksInTextStorageWhenANewPageIsAdded() {
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello earth test"))
        self.pageLinkManager.currentTextStorage = storage

        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil))

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate

        var page: Page?
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
            page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello Earth" }
        }

        let url = storage.attribute(.link, at: 5, effectiveRange: nil) as? URL
        XCTAssertEqual(url, page?.linkToPage(autoGenerated: true).url)
    }

    func test_updatesLinksInTextStorageWhenAPageIsRemoved() {
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
        self.pageLinkManager.currentTextStorage = storage

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
            self.modelController.collection(for: Page.self).delete(self.linkedPage)
        }

        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil))
    }

    func test_updatesLinksInTextStorageWhenAPageTitleChanges() {
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello world test"))
        self.pageLinkManager.currentTextStorage = storage

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
            self.linkedPage.title = "test"
        }

        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil) as? URL)
        let expectedURL = self.linkedPage.linkToPage(autoGenerated: true).url
        XCTAssertEqual(storage.attribute(.link, at: 0, effectiveRange: nil) as? URL, expectedURL)
        XCTAssertEqual(storage.attribute(.link, at: 17, effectiveRange: nil) as? URL, expectedURL)
    }

    func test_updatesLinksInTextStorageWhenTextStoragesChanges() {
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test "))
        self.pageLinkManager.currentTextStorage = storage

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation

            storage.delegate = self.pageLinkManager //This is forwarded in the real app as the main view controller/model needs it too

            storage.beginEditing()
            storage.insert(NSAttributedString(string: "Hello World"), at: 5)
            storage.endEditing()
        }

        let url = storage.attribute(.link, at: 5, effectiveRange: nil) as? URL
        XCTAssertEqual(url, self.linkedPage.linkToPage(autoGenerated: true).url)
    }


    //MARK: - Page
    func test_updatesLinksInPageWhenANewPageIsAdded() {
        let content = TextPageContent()
        content.text = NSTextStorage(attributedString: NSAttributedString(string: "Test hello earth test"))
        self.editingPage.content = content

        XCTAssertNil(content.text.attribute(.link, at: 5, effectiveRange: nil))

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate

        var page: Page?
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
            page = self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello Earth" }
        }

        let url = content.text.attribute(.link, at: 5, effectiveRange: nil) as? URL
        XCTAssertEqual(url, page?.linkToPage(autoGenerated: true).url)
    }

    func test_updatesLinksInPageWhenAPageIsRemoved() {
        let content = TextPageContent()
        content.text = NSAttributedString(string: "Test hello world test")
        self.editingPage.content = content

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Wait for initial parse to finish") { (expectation) in
            delegate.expectation = expectation
        }

        let url = content.text.attribute(.link, at: 5, effectiveRange: nil) as? URL
        XCTAssertEqual(url, self.linkedPage.linkToPage(autoGenerated: true).url)

        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
            self.modelController.collection(for: Page.self).delete(self.linkedPage)
        }

        XCTAssertNil(content.text.attribute(.link, at: 5, effectiveRange: nil))
    }

    func test_updatesLinksInPageWhenAPageTitleChanges() {
        let content = TextPageContent()
        content.text = NSAttributedString(string: "Test hello world test")
        self.editingPage.content = content

        let delegate = MockDelegate()
        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Wait for initial parse to finish") { (expectation) in
            delegate.expectation = expectation
        }

        let url = content.text.attribute(.link, at: 5, effectiveRange: nil) as? URL
        XCTAssertEqual(url, self.linkedPage.linkToPage(autoGenerated: true).url)

        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation
            self.linkedPage.title = "test"
        }


        XCTAssertNil(content.text.attribute(.link, at: 5, effectiveRange: nil) as? URL)
        let expectedURL = self.linkedPage.linkToPage(autoGenerated: true).url
        XCTAssertEqual(content.text.attribute(.link, at: 0, effectiveRange: nil) as? URL, expectedURL)
        XCTAssertEqual(content.text.attribute(.link, at: 17, effectiveRange: nil) as? URL, expectedURL)
    }



    //MARK: - Delegate
    func test_checksWithDelegateBeforeChanging() throws {
        let delegate = MockDelegate()
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello earth test"))
        self.pageLinkManager.currentTextStorage = storage

        self.pageLinkManager.delegate = delegate
        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation

            self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello Earth" }
        }

        let (ranges, _) = try XCTUnwrap(delegate.shouldChangeText)
        XCTAssertEqual(ranges, [NSRange(location: 0, length: 21)])
    }

    func test_doesntChangeIfDelegateReturnsFalse() {
        let delegate = MockDelegate()
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello earth test"))
        self.pageLinkManager.delegate = delegate
        self.pageLinkManager.currentTextStorage = storage

        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation

            delegate.shouldChangeTextReturn = false
            self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello Earth" }
        }

        XCTAssertNil(storage.attribute(.link, at: 5, effectiveRange: nil))
    }

    func test_informsDelegateAfterChange() {
        let delegate = MockDelegate()
        delegate.shouldChangeTextReturn = true
        let storage = NSTextStorage(attributedString: NSAttributedString(string: "Test hello earth test"))
        self.pageLinkManager.delegate = delegate
        self.pageLinkManager.currentTextStorage = storage

        self.performAndWaitFor("Did Finish Parsing Links") { (expectation) in
            delegate.expectation = expectation

            self.modelController.collection(for: Page.self).newObject() { $0.title = "Hello Earth" }
        }

        XCTAssertTrue(delegate.textDidChange)
    }
}

private class MockDelegate: TextPageLinkManagerDelegate {
    var shouldChangeText: ([NSRange], TextPageLinkManager)?
    var shouldChangeTextReturn: Bool = true
    func shouldChangeText(in ranges: [NSRange], manager: TextPageLinkManager) -> Bool {
        self.shouldChangeText = (ranges, manager)
        return self.shouldChangeTextReturn
    }

    var textDidChange = false
    func textDidChange(in manager: TextPageLinkManager) {
        self.textDidChange = true
    }

    var expectation: XCTestExpectation?
    func didFinishParsing(in manager: TextPageLinkManager) {
        self.expectation?.fulfill()
    }
}
