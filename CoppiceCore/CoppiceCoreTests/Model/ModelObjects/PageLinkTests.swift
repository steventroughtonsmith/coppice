//
//  PageLinkTests.swift
//  CoppiceTests
//
//  Created by Martin Pilkington on 06/12/2019.
//  Copyright Â© 2019 M Cubed Software. All rights reserved.
//

@testable import CoppiceCore
import XCTest

class PageLinkTests: XCTestCase {
    //MARK: init?(url:)
    func test_initURL_returnsNilIfURLDoesntUseCorrectScheme() {
        let url = URL(string: "http://www.mcubedsw.com")!
        XCTAssertNil(PageLink(url: url))
    }

    func test_initURL_returnsNilIfURLDoesntUsePageHostToIdentifyAsPageLink() {
        let url = URL(string: "\(GlobalConstants.urlScheme)://www.mcubedsw.com")!
        XCTAssertNil(PageLink(url: url))
    }

    func test_initURL_returnsNilIfFirstIndexIsntUUIDString() {
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/1234")!
        XCTAssertNil(PageLink(url: url))
    }

    func test_initURL_returnsCorrectModelIDAsDestination() throws {
        let uuid = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertEqual(pageLink.destination, Page.modelID(with: uuid))
    }

    func test_initURL_sourceIsNilIfQueryItemsDoesntContainSource() throws {
        let uuid = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)?\(PageLink.queryAutoName)=1")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertNil(pageLink.source)
    }

    func test_initURL_sourceIsNilIfSourceQueryItemIsNotValidUUIDString() throws {
        let uuid = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)?\(PageLink.querySourceName)=123")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertNil(pageLink.source)
    }

    func test_initURL_sourceIsSetToCorrectModelIDIfSet() throws {
        let uuid = UUID()
        let sourceUUID = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)?\(PageLink.querySourceName)=\(sourceUUID.uuidString)")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertEqual(pageLink.source, Page.modelID(with: sourceUUID))
    }

    func test_initURL_autoGeneratedIsFalseIfAutoQueryItemIsNotPresent() throws {
        let uuid = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)?\(PageLink.querySourceName)=123")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertFalse(pageLink.autoGenerated)
    }

    func test_initURL_autoGeneratedIsFalseIfAutoQueryItemIs0() throws {
        let uuid = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)?\(PageLink.queryAutoName)=0")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertFalse(pageLink.autoGenerated)
    }

    func test_initURL_autoGeneratedIsTrueIfAutoQueryItemIs1() throws {
        let uuid = UUID()
        let url = URL(string: "\(GlobalConstants.urlScheme)://\(PageLink.host)/\(uuid.uuidString)?\(PageLink.queryAutoName)=1")!
        let pageLink = try XCTUnwrap(PageLink(url: url))
        XCTAssertTrue(pageLink.autoGenerated)
    }


    //MARK: - URL
    func test_url_schemeIsAppScheme() throws {
        let pageLink = PageLink(destination: Page.modelID(with: UUID()))
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        XCTAssertEqual(components.scheme, GlobalConstants.urlScheme)
    }

    func test_url_hostIsPageHost() throws {
        let pageLink = PageLink(destination: Page.modelID(with: UUID()))
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        XCTAssertEqual(components.host, PageLink.host)
    }

    func test_url_firstPathItemIsDestinationUUID() throws {
        let uuid = UUID()
        let pageLink = PageLink(destination: Page.modelID(with: uuid))
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        XCTAssertEqual(components.path, "/\(uuid.uuidString)")
    }

    func test_url_sourceQueryItemDoesntExistIfSourceIsNil() throws {
        let pageLink = PageLink(destination: Page.modelID(with: UUID()), autoGenerated: true)
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        let items = try XCTUnwrap(components.queryItems?.indexed(by: \.name))
        XCTAssertNil(items[PageLink.querySourceName])
    }

    func test_url_sourceQueryItemIsSourceUUID() throws {
        let sourceUUID = UUID()
        let pageLink = PageLink(destination: Page.modelID(with: UUID()), source: Page.modelID(with: sourceUUID))
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        let items = try XCTUnwrap(components.queryItems?.indexed(by: \.name))
        XCTAssertEqual(items[PageLink.querySourceName]?.value, sourceUUID.uuidString)
    }

    func test_url_autoQueryItemDoesntExistIfAutoGeneratedIsFalse() throws {
        let pageLink = PageLink(destination: Page.modelID(with: UUID()), source: Page.modelID(with: UUID()))
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        let items = try XCTUnwrap(components.queryItems?.indexed(by: \.name))
        XCTAssertNil(items[PageLink.queryAutoName])
    }

    func test_url_autoQueryItemIs1IfAutoGeneratedIsTrue() throws {
        let pageLink = PageLink(destination: Page.modelID(with: UUID()), autoGenerated: true)
        let components = try XCTUnwrap(URLComponents(url: pageLink.url, resolvingAgainstBaseURL: false))
        let items = try XCTUnwrap(components.queryItems?.indexed(by: \.name))
        XCTAssertEqual(items[PageLink.queryAutoName]?.value, "1")
    }
}
