//
//  PlistV2.swift
//  CoppiceCore
//
//  Created by Martin Pilkington on 31/07/2022.
//

import Foundation
import M3Data

extension Plist {
    class V2: ModelPlist {
        override class var version: Int {
            return 2
        }
        
        override class var supportedTypes: [ModelPlist.PersistenceTypes] {
            return [
                PersistenceTypes(modelType: Page.modelType, persistenceName: "pages"),
                PersistenceTypes(modelType: Folder.modelType, persistenceName: "folders"),
                PersistenceTypes(modelType: Canvas.modelType, persistenceName: "canvases"),
                PersistenceTypes(modelType: CanvasPage.modelType, persistenceName: "canvasPages"),
            ]
        }
        
        override func migrateToNextVersion() throws -> [String : Any] {
            var migratedPlist = [String: Any]()
            migratedPlist["pages"] = self.plistRepresentations(of: Page.modelType).map(\.toPersistanceRepresentation)
            migratedPlist["folders"] = self.plistRepresentations(of: Folder.modelType).map(\.toPersistanceRepresentation)
            migratedPlist["canvases"] = self.plistRepresentations(of: Canvas.modelType).map(\.toPersistanceRepresentation)

            migratedPlist["settings"] = self.settings
            migratedPlist["version"] = V3.version


            let existingCanvasPages = self.plistRepresentations(of: CanvasPage.modelType)
            var canvasPagesByID = [String: [ModelPlistKey: Any]]()
            for existingCanvasPage in existingCanvasPages {
                guard let idString = (existingCanvasPage[.id] as? ModelID)?.stringRepresentation else {
                    throw ModelPlist.Errors.missingID(existingCanvasPage.toPersistanceRepresentation)
                }
                canvasPagesByID[idString] = existingCanvasPage
            }


            var createdCanvasLinks = [[ModelPlistKey: Any]]()
            var migratedCanvasPages = [[ModelPlistKey: Any]]()
            for canvasPage in existingCanvasPages {
                guard let destinationID = (canvasPage[.id] as? ModelID)?.stringRepresentation else {
                    throw ModelPlist.Errors.missingID(canvasPage.toPersistanceRepresentation)
                }

                guard let sourceID = canvasPage[.CanvasPage.parent] as? String else {
                    migratedCanvasPages.append(canvasPage)
                    continue
                }

                guard
                    let sourcePageString = canvasPagesByID[sourceID]?[.CanvasPage.page] as? String,
                    let sourcePageID = ModelID(string: sourcePageString),
                    let destinationPageString = canvasPage[.CanvasPage.page] as? String,
                    let destinationPageID = ModelID(string: destinationPageString)
                else {
                    throw ModelPlist.Errors.migrationFailed("Missing page for link between pages \(sourceID) and \(destinationID)")
                }


                var updatedCanvasPage = canvasPage
                updatedCanvasPage[.CanvasPage.parent] = nil
                migratedCanvasPages.append(updatedCanvasPage)

                let canvasLink: [ModelPlistKey: Any] = [
                    .id: CanvasLink.modelID(with: UUID()),
                    .CanvasLink.link: PageLink(destination: destinationPageID, source: sourcePageID, autoGenerated: false).url.absoluteString,
                    .CanvasLink.sourcePage: sourceID,
                    .CanvasLink.destinationPage: destinationID
                ]
                createdCanvasLinks.append(canvasLink)
            }

            migratedPlist["canvasPages"] = migratedCanvasPages.map(\.toPersistanceRepresentation)
            migratedPlist["canvasLinks"] = createdCanvasLinks.map(\.toPersistanceRepresentation)

            return migratedPlist
        }
    }
}
