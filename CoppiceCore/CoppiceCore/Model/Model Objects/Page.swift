//
//  Page.swift
//  Coppice
//
//  Created by Martin Pilkington on 15/07/2019.
//  Copyright Â© 2019 M Cubed Software. All rights reserved.
//

import Cocoa
import M3Data

@Model
final public class Page: FolderContainable {
    //MARK: - Init
    public init() {
        self.content.page = self
    }


    // MARK: - Attributes
    @Attribute public var title: String = ""
    @Attribute public var dateCreated = Date()
    @Attribute public var dateModified = Date()
    /// Added in 2021.2
    @Attribute(optional: true, default: true) public var allowsAutoLinking: Bool = true

    @Attribute(isModelFile: true) public var content: Page.Content = Page.Content.Text() {
        didSet {
            self.content.page = self
            NotificationCenter.default.post(name: Page.contentChangedNotification, object: self)
        }
    }

    @Attribute private var userPreferredSize: CGSize?
    public var contentSize: CGSize {
        get {
            return self.userPreferredSize ?? self.content.initialContentSize ?? Page.standardSize
        }
        set {
            self.userPreferredSize = newValue
        }
    }

    //MARK: - Relationships
    public var canvasPages: Set<CanvasPage> {
        return self.relationship(for: \.page)
    }

    //MARK: - FolderContainable
    public weak var containingFolder: Folder? {
        didSet { self.didChange(\.containingFolder, oldValue: oldValue) }
    }

    public var sortType: String {
        let type = self.content.contentType
        let index = Page.ContentType.allCases.firstIndex(of: type) ?? -1
        return "\(index + 1)\(type.rawValue)"
    }


    // MARK: - Content
    func contentSizeDidChange(to newSize: CGSize, oldSize: CGSize?) {
        if let undoManager = self.undoManager {
            guard undoManager.isUndoing == false, undoManager.isRedoing == false else {
                return
            }
        }
        self.canvasPages.forEach { $0.contentSizeDidChange(to: newSize, oldSize: oldSize) }
    }


    //MARK: - Helpers
    public func updatePageSizes() {
        guard self.userPreferredSize == nil else {
            return
        }
        self.canvasPages.forEach { canvasPage in
            var frame = canvasPage.frame
            frame.size = self.contentSize
            canvasPage.frame = frame
        }
    }

    public func linkToPage(autoGenerated: Bool = false) -> PageLink {
        return PageLink(destinationPage: self, autoGenerated: autoGenerated)
    }
}

//MARK: - Constants
extension Page {
    public static let standardSize = CGSize(width: 300, height: 200)
    public static let defaultMinimumContentSize = CGSize(width: 150, height: 100)
    public static let contentChangedNotification = Notification.Name("PageContentChangedNotification")
    public static let localizedDefaultTitle = "Untitled Page"
}

//MARK: - Model Collection extension
extension ModelCollection where ModelType == Page {
    @discardableResult public func newPage(fromFileAt url: URL) -> Page? {
        guard
            let resourceValues = try? url.resourceValues(forKeys: Set([.typeIdentifierKey])),
            let typeIdentifier = resourceValues.typeIdentifier
        else {
                return nil
        }

        guard let contentType = Page.ContentType.contentType(forUTI: typeIdentifier) else {
            return nil
        }

        guard let data = try? Data(contentsOf: url) else {
            return nil
        }

        let page = self.newObject() {
            $0.title = (url.lastPathComponent as NSString).deletingPathExtension
            $0.content = contentType.createContent(data: data)
        }
        return page
    }

    public func setContentValue<Value, ContentType>(_ value: Value, for keyPath: ReferenceWritableKeyPath<ContentType, Value>, ofPageWithID id: ModelID) {
        guard
            let page = self.objectWithID(id),
            let content = page.content as? ContentType
        else {
            return
        }
        content[keyPath: keyPath] = value
    }
}
