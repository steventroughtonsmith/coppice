//
//  Page.swift
//  Coppice
//
//  Created by Martin Pilkington on 15/07/2019.
//  Copyright Â© 2019 M Cubed Software. All rights reserved.
//

import Cocoa

struct Tag {
    let name: String
}

final public class Page: NSObject, CollectableModelObject, FolderContainable {
    public static let modelType: ModelType = ModelType(rawValue: "Page")!
    public static let standardSize = CGSize(width: 300, height: 200)
    public static let minimumSize = CGSize(width: 150, height: 100)
    public static let contentChangedNotification = Notification.Name("PageContentChangedNotification")
    public static let localizedDefaultTitle = "Untitled Page"

    public var id = ModelID(modelType: Page.modelType)
    public weak var collection: ModelCollection<Page>?

    public func linkToPage(from sourcePage: Page? = nil, autoGenerated: Bool = false) -> PageLink {
        return PageLink(destination: self.id, source: sourcePage?.id, autoGenerated: autoGenerated)
    }

    override public init() {
        self.title = ""
        self.content = TextPageContent()
        super.init()
        self.content.page = self
    }


    // MARK: - Attributes
    @objc dynamic public var title: String {
        didSet { self.didChange(\.title, oldValue: oldValue) }
    }

    @objc dynamic public var dateCreated = Date()
    @objc dynamic public var dateModified = Date()
    private var userPreferredSize: CGSize?
    public var contentSize: CGSize {
        get {
            return self.userPreferredSize ?? self.content.initialContentSize ?? Page.standardSize
        }
        set {
            self.userPreferredSize = newValue
        }
    }

    public private(set) var otherProperties = [String: Any]()

    /// Added in 2021.2
    @objc dynamic public var allowsAutoLinking: Bool = true {
        didSet { self.didChange(\.allowsAutoLinking, oldValue: oldValue) }
    }


    //MARK: - FolderContainable
    public weak var containingFolder: Folder? {
        didSet { self.didChange(\.containingFolder, oldValue: oldValue) }
    }

    public var sortType: String {
        let type = self.content.contentType
        let index = PageContentType.allCases.firstIndex(of: type) ?? -1
        return "\(index + 1)\(type.rawValue)"
    }


    // MARK: - Content
    public var content: PageContent {
        didSet {
            self.content.page = self
            NotificationCenter.default.post(name: Page.contentChangedNotification, object: self)
            self.didChange(\.content, oldValue: oldValue)
        }
    }

    func contentSizeDidChange(to newSize: CGSize, oldSize: CGSize?) {
        self.canvasPages.forEach { $0.contentSizeDidChange(to: newSize, oldSize: oldSize) }
    }

    //MARK: - Relationships
    public var canvasPages: Set<CanvasPage> {
        return self.relationship(for: \.page)
    }


    //MARK: - Helpers
    public func updatePageSizes() {
        guard self.userPreferredSize == nil else {
            return
        }
        self.canvasPages.forEach { canvasPage in
            var frame = canvasPage.frame
            frame.size = self.contentSize
            canvasPage.frame = frame
        }
    }


    //MARK: - Plists
    public static var modelFileProperties: [String] {
        return ["content"]
    }

    enum PlistKeys: String, CaseIterable {
        case id
        case title
        case dateCreated
        case dateModified
        case content
        case userPreferredSize
        case allowsAutoLinking //Added 2021.2
    }

    public var plistRepresentation: [String: Any] {
        var plist = self.otherProperties
		plist[PlistKeys.id.rawValue] = self.id.stringRepresentation
		plist[PlistKeys.title.rawValue] = self.title
		plist[PlistKeys.dateCreated.rawValue] = self.dateCreated
		plist[PlistKeys.dateModified.rawValue] = self.dateModified
		plist[PlistKeys.content.rawValue] = self.content.modelFile
        if let preferredSize = self.userPreferredSize {
            plist[PlistKeys.userPreferredSize.rawValue] = NSStringFromSize(preferredSize)
        }
        plist[PlistKeys.allowsAutoLinking.rawValue] = self.allowsAutoLinking

        return plist
    }

    public func update(fromPlistRepresentation plist: [String: Any]) throws {
        guard self.id.stringRepresentation == (plist[PlistKeys.id.rawValue] as? String) else {
            throw ModelObjectUpdateErrors.idsDontMatch
        }

        //Get values
        let title: String = try self.attribute(withKey: PlistKeys.title.rawValue, from: plist)
        let dateCreated: Date = try self.attribute(withKey: PlistKeys.dateCreated.rawValue, from: plist)
        let dateModified: Date = try self.attribute(withKey: PlistKeys.dateModified.rawValue, from: plist)

        var userPreferredSize: CGSize? = nil
        if let userPreferredSizeString = plist[PlistKeys.userPreferredSize.rawValue] as? String {
            userPreferredSize = NSSizeFromString(userPreferredSizeString)
        }

        let content: ModelFile = try self.attribute(withKey: PlistKeys.content.rawValue, from: plist)
        guard let contentType = PageContentType(rawValue: content.type) else {
            throw ModelObjectUpdateErrors.attributeNotFound(PlistKeys.content.rawValue)
        }

        let allowsAutoLinking = (plist[PlistKeys.allowsAutoLinking.rawValue] as? Bool) ?? true

        //Set values
        self.title = title
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.userPreferredSize = userPreferredSize
        self.content = contentType.createContent(data: content.data, metadata: content.metadata)
        self.allowsAutoLinking = allowsAutoLinking

        let plistKeys = PlistKeys.allCases.map(\.rawValue)
        self.otherProperties = plist.filter { (key, _) -> Bool in
            return plistKeys.contains(key) == false
        }
    }

    private func attribute<T>(withKey key: String, from plist: [String: Any]) throws -> T {
        guard let value = plist[key] as? T else {
            throw ModelObjectUpdateErrors.attributeNotFound(key)
        }
        return value
    }
}


extension ModelCollection where ModelType == Page {
    @discardableResult public func newPage(fromFileAt url: URL) -> Page? {
        guard
            let resourceValues = try? url.resourceValues(forKeys: Set([.typeIdentifierKey])),
            let typeIdentifier = resourceValues.typeIdentifier
        else {
                return nil
        }

        guard let contentType = PageContentType.contentType(forUTI: typeIdentifier) else {
            return nil
        }

        guard let data = try? Data(contentsOf: url) else {
            return nil
        }

        let page = self.newObject() {
            $0.title = (url.lastPathComponent as NSString).deletingPathExtension
            $0.content = contentType.createContent(data: data)
        }
        return page
    }

    public func setContentValue<Value, ContentType>(_ value: Value, for keyPath: ReferenceWritableKeyPath<ContentType, Value>, ofPageWithID id: ModelID) {
        guard
            let page = self.objectWithID(id),
            let content = page.content as? ContentType
        else {
            return
        }
        content[keyPath: keyPath] = value
    }
}
