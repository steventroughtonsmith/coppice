//
//  Page.swift
//  Coppice
//
//  Created by Martin Pilkington on 15/07/2019.
//  Copyright Â© 2019 M Cubed Software. All rights reserved.
//

import Cocoa

struct Tag {
    let name: String
}

public final class Page: NSObject, CollectableModelObject, FolderContainable {
    public static let modelType: ModelType = ModelType(rawValue: "Page")!
    public static let standardSize = CGSize(width: 300, height: 200)
    public static let minimumSize = CGSize(width: 150, height: 100)
    public static let contentChangedNotification = Notification.Name("PageContentChangedNotification")
    public static let localizedDefaultTitle = "Untitled Page"

    public var id = ModelID(modelType: Page.modelType)
    public weak var collection: ModelCollection<Page>?

    public func linkToPage(from sourcePage: Page? = nil, autoGenerated: Bool = false) -> PageLink {
        return PageLink(destination: self.id, source: sourcePage?.id, autoGenerated: autoGenerated)
    }

    public override init() {
        self.title = ""
        self.content = TextPageContent()
        super.init()
        self.content.page = self
    }


    // MARK: - Attributes
    @objc dynamic public var title: String {
        didSet { self.didChange(\.title, oldValue: oldValue) }
    }
    @objc dynamic public var dateCreated = Date()
    @objc dynamic public var dateModified = Date()
    private var userPreferredSize: CGSize?
    public var contentSize: CGSize {
        get {
            return self.userPreferredSize ?? self.content.initialContentSize ?? Page.standardSize
        }
        set {
            self.userPreferredSize = newValue
        }
    }


    //MARK: - FolderContainable
    public weak var containingFolder: Folder?

    public var sortType: String {
        let type = self.content.contentType
        let index = PageContentType.allCases.firstIndex(of: type) ?? -1
        return "\(index + 1)\(type.rawValue)"
    }


    // MARK: - Relationships
    public var content: PageContent {
        didSet {
            self.content.page = self
            NotificationCenter.default.post(name: Page.contentChangedNotification, object: self)
            self.didChange(\.content, oldValue: oldValue)
        }
    }

    public var canvases: Set<CanvasPage> {
        return self.relationship(for: \.page)
    }


    //MARK: - Helpers
    public func updatePageSizes() {
        guard self.userPreferredSize == nil else {
            return
        }
        self.canvases.forEach { canvasPage in
            var frame = canvasPage.frame
            frame.size = self.contentSize
            canvasPage.frame = frame
        }
    }


    //MARK: - Plists
    public static var modelFileProperties: [String] {
        return ["content"]
    }
    
    public var plistRepresentation: [String : Any] {
        var plist: [String: Any] = [
            "id": self.id.stringRepresentation,
            "title": self.title,
            "dateCreated": self.dateCreated,
            "dateModified": self.dateModified,
            "content": self.content.modelFile
        ]
        if let preferredSize = self.userPreferredSize {
            plist["userPreferredSize"] = NSStringFromSize(preferredSize)
        }

        return plist
    }

    public func update(fromPlistRepresentation plist: [String : Any]) throws {
        guard self.id.stringRepresentation == (plist["id"] as? String) else {
            throw ModelObjectUpdateErrors.idsDontMatch
        }

        self.title = try self.attribute(withKey: "title", from: plist)
        self.dateCreated = try self.attribute(withKey: "dateCreated", from: plist)
        self.dateModified = try self.attribute(withKey: "dateModified", from: plist)

        if let userPreferredSizeString = plist["userPreferredSize"] as? String {
            self.userPreferredSize = NSSizeFromString(userPreferredSizeString)
        } else {
            self.userPreferredSize = nil
        }

        let content: ModelFile = try self.attribute(withKey: "content", from: plist)
        guard let contentType = PageContentType(rawValue: content.type) else {
            throw ModelObjectUpdateErrors.attributeNotFound("content")
        }
        self.content = contentType.createContent(data: content.data, metadata: content.metadata)
    }

    private func attribute<T>(withKey key: String, from plist: [String: Any]) throws -> T {
        guard let value = plist[key] as? T else {
            throw ModelObjectUpdateErrors.attributeNotFound(key)
        }
        return value
    }
}


public extension ModelCollection where ModelType == Page {
    @discardableResult func newPage(fromFileAt url: URL) -> Page? {
        guard let resourceValues = try? url.resourceValues(forKeys: Set([.typeIdentifierKey])),
            let typeIdentifier = resourceValues.typeIdentifier else {
                return nil
        }

        guard let contentType = PageContentType.contentType(forUTI: typeIdentifier) else {
            return nil
        }

        guard let data = try? Data(contentsOf: url) else {
            return nil
        }

        let page = self.newObject() {
            $0.title = (url.lastPathComponent as NSString).deletingPathExtension
            $0.content = contentType.createContent(data: data)
        }
        return page
    }

    func setContentValue<Value, ContentType>(_ value: Value, for keyPath: ReferenceWritableKeyPath<ContentType, Value>, ofPageWithID id: ModelID) {
        guard let page = self.objectWithID(id),
            let content = page.content as? ContentType else {
            return
        }
        content[keyPath: keyPath] = value
    }
}
